name: E2E Tests with Playwright

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - auth
          - products
          - admin
          - delivery
      browser:
        description: 'Browser to test on'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit

env:
  NODE_ENV: test
  CI: true

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Setup MongoDB
      uses: supercharge/mongodb-github-action@v1.10.0
      with:
        mongodb-version: '6.0'
        mongodb-replica-set: test-rs
        mongodb-port: 27017

    - name: Setup Redis
      uses: supercharge/redis-github-action@v1.7.0
      with:
        redis-version: '7'
        redis-port: 6379

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install test dependencies
      working-directory: ./tests
      run: npm ci

    - name: Install Playwright Browsers
      working-directory: ./tests
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Create test environment file
      working-directory: ./tests
      run: |
        cat > .env.test << EOF
        NODE_ENV=test
        API_BASE_URL=http://localhost:5000
        FRONTEND_URL=http://localhost:5173
        MONGODB_URI=mongodb://localhost:27017/freshcart_test
        REDIS_URL=redis://localhost:6379/1
        HEADLESS=true
        TIMEOUT=30000
        SKIP_EMAIL_VERIFICATION=true
        SKIP_PHONE_VERIFICATION=true
        MOCK_PAYMENT_SERVICE=true
        MOCK_SMS_SERVICE=true
        MOCK_EMAIL_SERVICE=true
        EOF

    - name: Setup test database
      working-directory: ./backend
      run: |
        # Wait for MongoDB to be ready
        sleep 10
        # Run database migrations/setup if needed
        npm run db:setup || echo "No database setup script found"
      env:
        MONGODB_URI: mongodb://localhost:27017/freshcart_test

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Start backend server
      working-directory: ./backend
      run: |
        npm start &
        # Wait for server to start
        npx wait-on http://localhost:5000/api/health --timeout 60000
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/freshcart_test
        REDIS_URL: redis://localhost:6379/1
        PORT: 5000

    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm run preview &
        # Wait for frontend to start
        npx wait-on http://localhost:5173 --timeout 60000
      env:
        NODE_ENV: test
        VITE_API_URL: http://localhost:5000

    - name: Run Playwright tests - All
      if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == '' }}
      working-directory: ./tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        BROWSER: ${{ matrix.browser }}

    - name: Run Playwright tests - Auth only
      if: ${{ github.event.inputs.test_suite == 'auth' }}
      working-directory: ./tests
      run: npx playwright test auth.spec.js --project=${{ matrix.browser }}

    - name: Run Playwright tests - Products only
      if: ${{ github.event.inputs.test_suite == 'products' }}
      working-directory: ./tests
      run: npx playwright test products.spec.js --project=${{ matrix.browser }}

    - name: Run Playwright tests - Admin only
      if: ${{ github.event.inputs.test_suite == 'admin' }}
      working-directory: ./tests
      run: npx playwright test admin.spec.js --project=${{ matrix.browser }}

    - name: Run Playwright tests - Delivery only
      if: ${{ github.event.inputs.test_suite == 'delivery' }}
      working-directory: ./tests
      run: npx playwright test delivery.spec.js --project=${{ matrix.browser }}

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}-${{ matrix.node-version }}
        path: tests/playwright-report/
        retention-days: 30

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}-${{ matrix.node-version }}
        path: tests/test-results/
        retention-days: 30

    - name: Upload Screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: screenshots-${{ matrix.browser }}-${{ matrix.node-version }}
        path: tests/test-results/screenshots/
        retention-days: 30

    - name: Upload Videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: videos-${{ matrix.browser }}-${{ matrix.node-version }}
        path: tests/test-results/videos/
        retention-days: 30

  mobile-tests:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Setup MongoDB
      uses: supercharge/mongodb-github-action@v1.10.0
      with:
        mongodb-version: '6.0'

    - name: Setup Redis
      uses: supercharge/redis-github-action@v1.7.0
      with:
        redis-version: '7'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
        cd ../tests && npm ci

    - name: Install Playwright
      working-directory: ./tests
      run: npx playwright install --with-deps

    - name: Setup servers
      run: |
        cd backend && npm start &
        cd frontend && npm run preview &
        npx wait-on http://localhost:5000 http://localhost:5173 --timeout 60000
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/freshcart_test

    - name: Run Mobile Tests
      working-directory: ./tests
      run: |
        npx playwright test --project="Mobile Chrome"
        npx playwright test --project="Mobile Safari"

    - name: Upload Mobile Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-results
        path: tests/test-results/
        retention-days: 30

  performance-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Setup and run servers
      run: |
        cd backend && npm ci && npm start &
        cd frontend && npm ci && npm run build && npm run preview &
        npx wait-on http://localhost:5000 http://localhost:5173 --timeout 60000

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './tests/lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true

  security-tests:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        cd backend && npm audit --audit-level high
        cd ../frontend && npm audit --audit-level high
        cd ../tests && npm audit --audit-level high

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:5173'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  notify:
    runs-on: ubuntu-latest
    needs: [test, mobile-tests, performance-tests, security-tests]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: ${{ needs.test.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        fields: repo,message,commit,author,action,eventName,ref,workflow
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify Slack on Failure
      if: ${{ needs.test.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        fields: repo,message,commit,author,action,eventName,ref,workflow
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Create GitHub Issue on Failure
      if: ${{ needs.test.result == 'failure' && github.event_name == 'schedule' }}
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Scheduled E2E Tests Failed',
            body: `The scheduled E2E tests failed on ${new Date().toISOString()}.\n\nPlease check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.`,
            labels: ['bug', 'e2e-tests', 'automated']
          })

  cleanup:
    runs-on: ubuntu-latest
    needs: [test, mobile-tests, performance-tests, security-tests]
    if: always()
    
    steps:
    - name: Cleanup old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
            const createdAt = new Date(artifact.created_at);
            const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
            return createdAt < thirtyDaysAgo;
          });
          
          for (const artifact of oldArtifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id
            });
          }